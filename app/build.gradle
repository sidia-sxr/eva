apply plugin: 'com.android.application'

android.applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "Eva-${variant.versionName}.apk"
    }
}

def useLocalDependencies() {
    return project.hasProperty("useLocalDependencies") && new Boolean(project.useLocalDependencies)
}

def sxrSDK = getPropertyOrDefault("SXR_SDK", null)

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "http://google.bintray.com/googlevr"
        }
        if (sxrSDK != null && useLocalDependencies()) {
            flatDir {
                dirs sxrSDK
            }
        }
    }
}

def getPropertyOrDefault(propertyName, defaultValue) {
    return project.hasProperty(propertyName) ? project.property(propertyName) : defaultValue
}

def GOOGLE_CLOUD_ANCHOR_KEY_NAME = "com.google.android.ar.API_KEY"

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "br.org.sidia.eva"
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 1
        versionName "0.0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "GOOGLE_CLOUD_ANCHOR_KEY_NAME", "\"$GOOGLE_CLOUD_ANCHOR_KEY_NAME\""
        manifestPlaceholders = [cloudAnchorApiKeyName : GOOGLE_CLOUD_ANCHOR_KEY_NAME,
                                cloudAnchorApiKeyValue: getPropertyOrDefault("cloudAnchorApiKey", "")]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        pickFirst 'lib/*/libc++_shared.so'
        pickFirst 'lib/*/libgnustl_shared.so'
    }

    flavorDimensions "vr"

    productFlavors {
        monoscopic {
            dimension "vr"
            applicationIdSuffix ".monoscopic"
        }
    }
}

ext.sxrVersion = '5.0.1-SNAPSHOT'
project.ext.jomlVersion = "1.9.3-SNAPSHOT"

dependencies {
    // ARCore library
    implementation "com.google.ar:core:1.5.0"
    implementation "org.joml:joml-android:${jomlVersion}"
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'org.greenrobot:eventbus:3.1.1'

    if (useLocalDependencies()) {
        if (findProject(':sxrsdk')) {
            implementation project(':sxrsdk')
        } else {
            debugImplementation(name: 'sxrsdk-debug', ext: 'aar')
            releaseImplementation(name: 'sxrsdk-release', ext: 'aar')
        }
        if (findProject(':backend_monoscopic')) {
            monoscopicImplementation project(':backend_monoscopic')
        } else {
            monoscopicImplementation(':backend_monoscopic-release@aar')
        }
        if (findProject(':MixedReality')) {
            implementation project(':MixedReality')
        } else {
            debugImplementation(name: 'MixedReality-debug', ext: 'aar')
            releaseImplementation(name: 'MixedReality-release', ext: 'aar')
        }
        if (findProject(':sxr-physics')) {
            implementation project(':sxr-physics')
        } else {
            debugImplementation(name: 'sxr-physics-debug', ext: 'aar')
            releaseImplementation(name: 'sxr-physics-release', ext: 'aar')
        }

    } else {
        implementation 'com.google.code.gson:gson:2.8.5'
        implementation "com.samsungxr:sxrsdk:$sxrVersion"
        implementation "com.samsungxr:MixedReality:$sxrVersion"
        implementation "com.samsungxr:sxr-physics:$sxrVersion"
        monoscopicImplementation "com.samsungxr:backend_monoscopic:$sxrVersion"
    }
}
